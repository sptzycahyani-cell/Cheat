-- ConnectionManager: simpan semua connection dan beri kemampuan remove by tag
local ConnectionManager = {}
ConnectionManager.__index = ConnectionManager

function ConnectionManager.new()
    return setmetatable({
        connections = {} -- { tag -> {conn, conn, ...}, ... }
    }, ConnectionManager)
end

-- connect dan simpan connection ke tag (tag opsional)
function ConnectionManager:connect(event, callback, tag)
    assert(type(callback) == "function", "callback must be function")
    local conn = event:Connect(callback)
    tag = tag or "__default"
    self.connections[tag] = self.connections[tag] or {}
    table.insert(self.connections[tag], conn)
    return conn
end

-- disconnect semua connections di sebuah tag
function ConnectionManager:removeTag(tag)
    local list = self.connections[tag]
    if not list then return end
    for _, conn in ipairs(list) do
        if conn and typeof(conn) == "RBXScriptConnection" then
            pcall(function() conn:Disconnect() end)
        else
            -- fallback: some frameworks return plain tables/objects
            if type(conn) == "table" and conn.Disconnect then
                pcall(function() conn:Disconnect() end)
            end
        end
    end
    self.connections[tag] = nil
end

-- disconnect and clear all
function ConnectionManager:removeAll()
    for tag, _ in pairs(self.connections) do
        self:removeTag(tag)
    end
end

-- contoh pemakaian (Roblox)
-- local cm = ConnectionManager.new()
-- local conn1 = cm:connect(game:GetService("RunService").Heartbeat, function(dt) print("hb", dt) end, "heartbeat")
-- cm:removeTag("heartbeat") -- disconnect heartbeat listener
-- cm:removeAll() -- disconnect semua
