-- LocalScript (letakkan di StarterPlayerScripts)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")

-- Tabel untuk menyimpan remote event yang ditemukan
local remoteEvents = {}
-- Tabel untuk menyimpan ringkasan event yang baru saja diterima
local recentFirings = {}

-- Fungsi menampilkan notifikasi (sistem, bukan GUI kustom)
local function notify(title, text, duration)
    -- SetCore "SendNotification" hanya tersedia di LocalScript
    pcall(function()
        StarterGui:SetCore("SendNotification", {
            Title = title or "Info";
            Text = text or "";
            Duration = duration or 4;
        })
    end)
end

-- Scan ReplicatedStorage untuk RemoteEvent (juga bisa diubah ke folder lain)
local function scanForRemoteEvents()
    for _, item in ipairs(ReplicatedStorage:GetDescendants()) do
        if item:IsA("RemoteEvent") then
            -- hindari pengulangan
            if not remoteEvents[item] then
                remoteEvents[item] = true

                -- koneksi OnClientEvent untuk menangkap pemanggilan dari server ke client
                item.OnClientEvent:Connect(function(...)
                    -- simpan ringkasan sederhana: nama event, waktu, dan arg pertama (jika ada)
                    local args = {...}
                    local summary = {
                        name = item:GetFullName(),
                        time = os.time(),
                        firstArg = args[1],
                    }
                    table.insert(recentFirings, summary)

                    -- notifikasi segera (singkat)
                    local txt = "Event: "..item.Name
                    -- sertakan arg pertama jika bukan table/function/Instance
                    if summary.firstArg ~= nil then
                        local argt = typeof(summary.firstArg)
                        if argt == "string" or argt == "number" or argt == "boolean" then
                            txt = txt .. " | Arg: " .. tostring(summary.firstArg)
                        end
                    end
                    notify("RemoteEvent Fired", txt, 3)
                end)
            end
        end
    end
end

-- Jalankan scan pertama
scanForRemoteEvents()

-- Jika Anda membuat RemoteEvent baru di runtime, kita bisa memantau perubahan
ReplicatedStorage.DescendantAdded:Connect(function(desc)
    if desc:IsA("RemoteEvent") then
        -- singkat: panggil scan kecil untuk mendaftarkan yang baru
        scanForRemoteEvents()
    end
end)

-- Contoh pemrosesan per-frame dengan RunService.Heartbeat
-- Di sini kita membersihkan entri lama dan, setiap beberapa detik, menampilkan ringkasan
local lastSummary = 0
local SUMMARY_INTERVAL = 10 -- detik

RunService.Heartbeat:Connect(function(dt)
    -- bersihkan recentFirings lebih tua dari 60 detik
    local now = os.time()
    local i = 1
    while i <= #recentFirings do
        if now - recentFirings[i].time > 60 then
            table.remove(recentFirings, i)
        else
            i = i + 1
        end
    end

    -- interval untuk notifikasi ringkasan
    if now - lastSummary >= SUMMARY_INTERVAL then
        lastSummary = now
        if #recentFirings > 0 then
            -- buat ringkasan singkat: jumlah dan event terakhir
            local count = #recentFirings
            local last = recentFirings[#recentFirings]
            local text = ("%d firing(s) in last minute. Last: %s"):format(count, last.name)
            notify("RemoteEvent Summary", text, 4)
        end
    end
end)

-- Opsional: fungsi bantuan untuk daftar semua RemoteEvent yang terdaftar (debug)
local function listRegistered()
    local t = {}
    for re, _ in pairs(remoteEvents) do
        table.insert(t, re:GetFullName())
    end
    table.sort(t)
    return t
end

-- Contoh penggunaan: print daftar ke output (bisa dikomentari)
for _, name in ipairs(listRegistered()) do
    print("[Registered RemoteEvent] " .. name)
end

-- Akhir skrip
